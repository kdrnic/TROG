diff --git a/entityTemplates.tmx b/entityTemplates.tmx
index 7f766bc..b41bc22 100644
--- a/entityTemplates.tmx
+++ b/entityTemplates.tmx
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<map version="1.0" tiledversion="1.0.3" orientation="orthogonal" renderorder="right-down" width="20" height="20" tilewidth="15" tileheight="15" nextobjectid="34">
+<map version="1.0" tiledversion="1.0.3" orientation="orthogonal" renderorder="right-down" width="20" height="20" tilewidth="15" tileheight="15" nextobjectid="35">
  <objectgroup name="Object Layer 1">
   <object id="4" name="Entity" x="-15" y="-15" width="30" height="30"/>
   <object id="5" name="Button" x="45" y="-15" width="30" height="30">
@@ -94,5 +94,10 @@
   <object id="30" name="Plague" x="-15" y="285" width="30" height="30"/>
   <object id="31" name="Rock" x="45" y="285" width="30" height="30"/>
   <object id="32" name="Saver" x="105" y="285" width="30" height="30"/>
+  <object id="34" name="Teller" x="105" y="105" width="30" height="30">
+   <properties>
+    <property name="text" value=""/>
+   </properties>
+  </object>
  </objectgroup>
 </map>
diff --git a/src/Entity.cpp b/src/Entity.cpp
index 688e5af..929ead7 100644
--- a/src/Entity.cpp
+++ b/src/Entity.cpp
@@ -5,6 +5,7 @@
 
 #include "Game.h"
 #include "Entity.h"
+#include "SoundVolume.h"
 
 const float blockWidth = 15.0f;
 const float blockHeight = 15.0f;
@@ -285,7 +286,7 @@ bool Entity::IsBlockFloor(int b)
 
 float Entity::GetFeetHeight()
 {
-	return 15;
+	return 10;
 }
 
 bool Entity::CheckFloor(float &floorX, float &floorY)
@@ -330,5 +331,20 @@ int Entity::PlaySample(const SAMPLE *spl, int vol, int freq)
 	int pan = ((x + (width * 0.5f)) / 630.0f) * 255.0f;
 	if(pan < 0) pan = 0;
 	if(pan > 255) pan = 255;
+
+	//vol = GetSoundVolume(
+
 	return play_sample(spl, vol, pan, freq, 0);
 }
+
+int Entity::PlaySample(const char *name, int vol, int freq)
+{
+	int pan = ((x + (width * 0.5f)) / 630.0f) * 255.0f;
+	if(pan < 0) pan = 0;
+	if(pan > 255) pan = 255;
+
+	SAMPLE *spl = (SAMPLE *) game.GetData(name);
+	vol = (vol * 255) / (GetSoundVolume(std::string(name)));
+
+	return play_sample(spl, vol, pan, freq, 0);
+}
diff --git a/src/Entity.h b/src/Entity.h
index 1079aa0..9d6153e 100644
--- a/src/Entity.h
+++ b/src/Entity.h
@@ -10,30 +10,31 @@ class Entity
 {
 	public:
 		unsigned int mapId;
-
+		
 		bool ignorePos;
 		bool pushBack;
 		bool alive, persistent;
 		float x, y, width, height;
 		int layer;
-
+		
 		virtual bool Is(std::string what);
 		virtual void Draw(BITMAP *bmp);
 		virtual void Update();
 		virtual void OnCollision(Entity *e);
 		virtual void SetParameter(std::string p, std::string v);
 		virtual void OnCreate();
-
+		
 		bool Collision(Entity *e);
 		bool Collision(int _x, int _y, int _w, int _h);
-
+		
 		bool WithinDistanceTo(Entity *other, float distance);
-
+		
 		int PlaySample(const SAMPLE *spl, int vol = 255, int freq = 1000);
+		int PlaySample(const char *name, int vol = 255, int freq = 1000);
 
 		void GetCenter(float &x, float &y);
 		void GetCenter(int &x, int &y);
-
+		
 		Entity();
 	protected:
 		virtual bool IsEntitySolid(Entity *e);
@@ -45,7 +46,7 @@ class Entity
 		float GetMinDx();
 		float GetMinDy();
 		bool MoveSolid(float dx, float dy);
-
+		
 		virtual bool IsBlockFloor(int b);
 		virtual float GetFeetHeight();
 		bool CheckFloor(float &floorX, float &floorY);
diff --git a/src/Game.cpp b/src/Game.cpp
index 7deb50c..e310d89 100644
--- a/src/Game.cpp
+++ b/src/Game.cpp
@@ -30,6 +30,7 @@
 #include "Devil.h"
 #include "Gargoyle.h"
 #include "MusicSetter.h"
+#include "Teller.h"
 
 #include "AK47.h"
 #include "AKMagazine.h"
@@ -120,8 +121,7 @@ void GameManager::Init()
 	doubleBuffer = create_bitmap(640, 480);
 	transitionBitmap = create_bitmap(630, 420);
 	playArea = create_bitmap(630, 420);
-	if(zoomMode) zoomBuffer = create_bitmap(640, 430);
-
+	
 	hud = (BITMAP *) GetData("gui_hud"); // load_bitmap("hud.bmp", 0);
 	inventoryManager.inventoryBackground = (BITMAP *) GetData("gui_inventory"); // load_bitmap("inventory.bmp", 0);
 	inventoryManager.itemSelection = (BITMAP *) GetData("gui_itemSelection"); // load_bitmap("itemSelection.bmp", 0);
@@ -149,12 +149,17 @@ void GameManager::Init()
 	blip = (SAMPLE *) GetData("snd_blip");
 
 	shallPause = false;
+	
+	zoomBuffer = 0;
 }
 
 void GameManager::Start(int f)
 {
 	file = f;
 	continuePlaying = true;
+	
+	if(zoomMode && (!zoomBuffer)) zoomBuffer = create_bitmap(640, 430);
+	
 	while(continuePlaying)
 	{
 		player = new Player;
@@ -450,6 +455,7 @@ void GameManager::RegisterEntities()
 	REGISTER_ENTITY(Devil)
 	REGISTER_ENTITY(Gargoyle)
 	REGISTER_ENTITY(MusicSetter)
+	REGISTER_ENTITY(Teller)
 	#undef REGISTER_ENTITY
 }
 
diff --git a/src/main.cpp b/src/main.cpp
index adbdf2f..fe5aefa 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -5,6 +5,8 @@
 
 #include "Keys.h"
 
+#include "SoundVolume.h"
+
 #include <cstring>
 #include <iostream>
 
@@ -23,7 +25,7 @@ void CheckMIDIs()
 
 char *MIDIDriverGetter(int index, int *list_size)
 {
-	const char *names[] = 
+	const char *names[] =
 	{
 		"None (no music)",
 		"Default OS driver",
@@ -75,7 +77,7 @@ char *MIDIDriverGetter(int index, int *list_size)
 
 char *JoystickGetter(int index, int *list_size)
 {
-	const char *names[] = 
+	const char *names[] =
 	{
 		"Joystick #1",
 		"Joystick #2",
@@ -102,7 +104,7 @@ char *JoystickGetter(int index, int *list_size)
 	else return (char *) names[index];
 }
 
-char cfgW[5], cfgH[5];
+char cfgW[5] = "", cfgH[5] = "";
 bool cfgFull, cfgZoom;
 
 DIALOG cfgDialog[] =
@@ -141,30 +143,88 @@ void CfgSave()
 {
 	set_config_int("gfxmode", "fullscreen", cfgFull);
 	set_config_int("gfxmode", "zoomin", cfgZoom);
-	
+
 	set_config_int("gfxmode", "width", std::atoi(cfgW));
 	set_config_int("gfxmode", "height", std::atoi(cfgH));
-	
+
 	SaveControls();
 }
 
+void CfgApply()
+{
+	bool resGood = true;
+	for(int i = 0; i < 4; i++)
+	{
+		if((i < strlen(cfgW)) && ((cfgW[i] > '9') || (cfgW[i] < '0'))) resGood = false;
+		if((i < strlen(cfgH)) && ((cfgH[i] > '9') || (cfgH[i] < '0'))) resGood = false;
+	}
+	if(!resGood)
+	{
+		strcpy(cfgW, "640");
+		strcpy(cfgH, "480");
+	}
+
+	cfgFull = (cfgDialog[1].flags & D_SELECTED) && true;
+	cfgZoom = (cfgDialog[2].flags & D_SELECTED) && true;
+}
+
+void CfgKb()
+{
+}
+
+void CfgJoy()
+{
+}
+
+void CfgDefaults()
+{
+}
+
 void DoConfiguration()
 {
 	std::cout << numMIDIs;
 	LoadControls();
 	
+	if(cfgFull) cfgDialog[1].flags |= D_SELECTED;
+	if(cfgZoom) cfgDialog[2].flags |= D_SELECTED;
+
 	int ret;
 	while((ret = do_dialog(cfgDialog, -1)) != 5)
 	{
 		switch(ret)
 		{
-			case 4:
+			case 4:		//apply
+				CfgApply();
+				if((screen->w != std::atoi(cfgW)) || (screen->h != std::atoi(cfgH)))
+				{
+					if(!set_gfx_mode(cfgFull ? GFX_AUTODETECT_FULLSCREEN : GFX_AUTODETECT_WINDOWED, std::atoi(cfgW), std::atoi(cfgH), 0, 0))
+					{
+						if(alert("Keep this graphics mode?", "If not, configuration won't be saved", "", "Yes", "No", 0, 0) == 1) CfgSave();
+						else
+						{
+							strcpy(cfgW, "640");
+							strcpy(cfgH, "480");
+							set_gfx_mode(cfgFull ? GFX_AUTODETECT_FULLSCREEN : GFX_AUTODETECT_WINDOWED, std::atoi(cfgW), std::atoi(cfgH), 0, 0);
+						}
+					}
+					else
+					{
+						strcpy(cfgW, "640");
+						strcpy(cfgH, "480");
+						set_gfx_mode(cfgFull ? GFX_AUTODETECT_FULLSCREEN : GFX_AUTODETECT_WINDOWED, std::atoi(cfgW), std::atoi(cfgH), 0, 0);
+					}
+				}
+				break;
+			case 5:		//leave
 				break;
-			case 5:
+			case 6:		//kb
+				CfgKb();
 				break;
-			case 6:
+			case 7:		//joy
+				CfgJoy();
 				break;
-			case 7:
+			case 16:	//leave default
+				CfgDefaults();
 				break;
 		}
 	}
@@ -178,15 +238,15 @@ void SwitchOut()
 int MainMenu()
 {
 	clear(screen);
-	
+
 	const char *strings[] = {"PLAY", "OPTIONS", "QUIT"};
 	int colorSel = 0xFFFF00;
 	int colorNot = 0xFFFFFF;
-	
+
 	int i;
 	int y;
 	int sel = 0;
-	
+
 	while(true)
 	{
 		for(i = 0, y = screen->h / 4; i < 3; i++, y += screen->h / 4)
@@ -196,7 +256,7 @@ int MainMenu()
 		UpdateKeys();
 		if(upKey == KeyDown) sel = (sel + 2) % 3;
 		if(downKey == KeyDown) sel = (sel + 1) % 3;
-		
+
 		if((aKey == KeyDown) || (sKey == KeyDown) || (xKey == KeyDown) || (cKey == KeyDown)) return sel;
 	}
 }
@@ -208,28 +268,29 @@ int main(int argc, char **argv)
 
 	srand(time(0));
 	allegro_init();
-	set_color_depth(32);
-	CheckMIDIs();
-	set_config_file("trog.cfg");
-	fullScreen = get_config_int("gfxmode", "fullscreen", 0);
-	windowW = get_config_int("gfxmode", "width", 640);
-	windowH = get_config_int("gfxmode", "height", 480);
 
-	set_gfx_mode(fullScreen ? GFX_AUTODETECT_FULLSCREEN : GFX_AUTODETECT_WINDOWED, windowW, windowH, 0, 0);
 	install_keyboard();
 	install_mouse();
 	install_timer();
 	install_joystick(JOY_TYPE_AUTODETECT);
+
+	set_color_depth(32);
+
+	CheckMIDIs();
+	set_config_file("trog.cfg");
+
+	CfgLoad();
+
+	set_gfx_mode(cfgFull ? GFX_AUTODETECT_FULLSCREEN : GFX_AUTODETECT_WINDOWED, std::atoi(cfgW), std::atoi(cfgH), 0, 0);
 	install_sound(DIGI_AUTODETECT, MIDI_AUTODETECT, 0);
 
 	set_window_title("The Revenge of Gregorius");
 	set_display_switch_mode(SWITCH_BACKGROUND);
 	set_display_switch_callback(SWITCH_OUT, &SwitchOut);
-
-	LoadControls();
 	
+	LoadSoundVolumes("sounds.cfg");
 	game.Init();
-	
+
 	bool notQuit = true;
 	while(notQuit)
 	{
@@ -237,7 +298,7 @@ int main(int argc, char **argv)
 		switch(ret)
 		{
 			case 0:
-				game.zoomMode = get_config_int("gfxmode", "zoomin", 0);
+				game.zoomMode = cfgZoom;
 				game.Start(-1);
 				break;
 			case 1:
